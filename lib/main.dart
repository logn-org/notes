import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:provider/provider.dart';
import 'package:shared_preferences/shared_preferences.dart';

// Import your screen and service files
import 'screens/login_screen.dart';
import 'screens/home_screen.dart';
import 'themes.dart'; // Import the themes
import 'models/theme_notifier.dart'; // Import ThemeNotifier
import 'services/auth_service.dart';
import 'firebase_options.dart'; // Auto-generated by FlutterFire CLI or manually added

void main() async {
  // Ensure Flutter bindings are initialized
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Firebase
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);

  // Get SharedPreferences instance
  final prefs = await SharedPreferences.getInstance();

  // Run the app, passing the prefs instance
  runApp(MyApp(prefs: prefs));
}

class MyApp extends StatelessWidget {
  // Declare the prefs field
  final SharedPreferences prefs;

  // Update the constructor to accept and store prefs
  const MyApp({required this.prefs, super.key});

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        // Provider for authentication service
        ChangeNotifierProvider(create: (context) => AuthService()),
        // Provider for theme notifier, passing the stored prefs instance
        ChangeNotifierProvider(
          create: (context) => ThemeNotifier(prefs), // Use the stored prefs
        ),
      ],
      child: Builder(
        builder: (context) {
          // Access the ThemeNotifier from the provider
          final themeNotifier = Provider.of<ThemeNotifier>(context);
          return MaterialApp(
            // Use the themeMode from the notifier
            themeMode: themeNotifier.themeMode,
            title:
                'Logn Notes', // Consider changing if this was a typo for 'Login Notes' or 'Keep Notes'
            theme: AppThemes.lightTheme, // Your light theme definition
            darkTheme: AppThemes.darkTheme, // Your dark theme definition
            // The themeMode property above handles theme switching,
            // so setting themeMode: themeNotifier.getTheme() might be redundant or incorrect
            // depending on how getTheme() is implemented. Using themeNotifier.themeMode is standard.
            home: const AuthWrapper(), // Start with the authentication wrapper
            debugShowCheckedModeBanner: false, // Hide debug banner
          );
        },
      ),
    );
  }
}

/// Wrapper widget to decide which screen to show based on auth state
class AuthWrapper extends StatelessWidget {
  const AuthWrapper({super.key});

  @override
  Widget build(BuildContext context) {
    // Access the AuthService from the provider
    final authService = Provider.of<AuthService>(context);

    // Listen to authentication state changes
    return StreamBuilder<User?>(
      stream: authService.authStateChanges,
      builder: (context, snapshot) {
        // Show loading indicator while waiting for connection
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Scaffold(
            body: Center(child: CircularProgressIndicator()),
          );
        }
        // Once connection is active, check user state
        if (snapshot.connectionState == ConnectionState.active) {
          final User? user = snapshot.data;
          // If user is null (not logged in), show LoginScreen
          // Otherwise (user exists), show HomeScreen
          return user == null ? const LoginScreen() : HomeScreen();
        }
        // Handle other states (like error) if necessary, or show loading as default
        return const Scaffold(body: Center(child: CircularProgressIndicator()));
      },
    );
  }
}
