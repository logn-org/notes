import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:provider/provider.dart';

// Import your screen and service files
import 'screens/login_screen.dart';
import 'screens/home_screen.dart';
import 'services/auth_service.dart';
import 'firebase_options.dart'; // Auto-generated by FlutterFire CLI or manually added

void main() async {
  // Ensure Flutter bindings are initialized
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Firebase
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // Run the app
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Use MultiProvider if you have more services/providers
    return ChangeNotifierProvider(
      create: (context) => AuthService(), // Provide the AuthService
      child: MaterialApp(
        title: 'Flutter Keep Clone',
        theme: ThemeData(
          primarySwatch: Colors.yellow, // Keep-like theme
          visualDensity: VisualDensity.adaptivePlatformDensity,
          useMaterial3: true, // Use Material 3 design
          brightness: Brightness.light, // Or Brightness.dark
          // Add more theme customizations here for a "stunning UI"
        ),
        home: AuthWrapper(), // Start with a wrapper to check auth state
        debugShowCheckedModeBanner: false,
      ),
    );
  }
}

// Wrapper widget to decide which screen to show based on auth state
class AuthWrapper extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final authService = Provider.of<AuthService>(context);

    return StreamBuilder<User?>(
      stream: authService.authStateChanges, // Listen to auth state
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.active) {
          final User? user = snapshot.data;
          // If user is logged in, show HomeScreen, otherwise show LoginScreen
          return user == null ? LoginScreen() : HomeScreen();
        } else {
          // Show loading indicator while checking auth state
          return Scaffold(
            body: Center(
              child: CircularProgressIndicator(),
            ),
          );
        }
      },
    );
  }
}
